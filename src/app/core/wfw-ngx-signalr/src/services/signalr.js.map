{"version":3,"file":"signalr.js","sourceRoot":"","sources":["../../../src/services/signalr.ts"],"names":[],"mappings":"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","sourcesContent":["import { ISignalRConnection } from './connection/i.signalr.connection';\nimport { SignalRConfiguration } from './signalr.configuration';\nimport { SignalRConnection } from './connection/signalr.connection';\nimport { NgZone, Injectable, Inject } from '@angular/core';\nimport { IConnectionOptions } from './connection/connection.options';\nimport { ConnectionTransport } from './connection/connection.transport';\nimport { Observable } from 'rxjs/Observable';\nimport { ConnectionStatus } from './connection/connection.status';\nimport { SIGNALR_JCONNECTION_TOKEN } from \"./signalr.module\";\n\ndeclare var jQuery: any;\n\n@Injectable()\nexport class SignalR {\n    private _configuration: SignalRConfiguration;\n    private _zone: NgZone;\n    private _jHubConnectionFn: any;\n\n    public constructor(\n        configuration: SignalRConfiguration,\n        zone: NgZone,\n        @Inject(SIGNALR_JCONNECTION_TOKEN) jHubConnectionFn: Function\n    ) {\n        this._configuration = configuration;\n        this._zone = zone;\n        this._jHubConnectionFn = jHubConnectionFn;\n    }\n\n    public createConnection(options?: IConnectionOptions): SignalRConnection {\n        let status: Observable<ConnectionStatus>;\n        let configuration = this.merge(options ? options : {});\n\n        try {\n\n            let serializedQs = JSON.stringify(configuration.qs);\n            let serializedTransport = JSON.stringify(configuration.transport);\n\n            if (configuration.logging) {\n                console.log(`Creating connecting with...`);\n                console.log(`configuration:[url: '${configuration.url}'] ...`);\n                console.log(`configuration:[hubName: '${configuration.hubName}'] ...`);\n                console.log(`configuration:[qs: '${serializedQs}'] ...`);\n                console.log(`configuration:[transport: '${serializedTransport}'] ...`);\n            }\n        } catch (err) { }\n\n        // create connection object\n        let jConnection = this._jHubConnectionFn(configuration.url);\n        jConnection.logging = configuration.logging;\n        jConnection.qs = configuration.qs;\n\n        // create a proxy\n        let jProxy = jConnection.createHubProxy(configuration.hubName);\n        // !!! important. We need to register at least one function otherwise server callbacks will not work.\n        jProxy.on('noOp', function () { });\n\n        let hubConnection = new SignalRConnection(jConnection, jProxy, this._zone, configuration);\n\n        return hubConnection;\n    }\n\n\n    public connect(options?: IConnectionOptions): Promise<ISignalRConnection> {\n\n        return this.createConnection(options).start();\n    }\n\n    private merge(overrides: IConnectionOptions): SignalRConfiguration {\n        let merged: SignalRConfiguration = new SignalRConfiguration();\n        merged.hubName = overrides.hubName || this._configuration.hubName;\n        merged.url = overrides.url || this._configuration.url;\n        merged.qs = overrides.qs || this._configuration.qs;\n        merged.logging = this._configuration.logging;\n        merged.jsonp = overrides.jsonp || this._configuration.jsonp;\n        merged.withCredentials = overrides.withCredentials || this._configuration.withCredentials;\n        merged.transport = overrides.transport || this._configuration.transport;\n        return merged;\n    }\n\n}\n"]}