{"version":3,"file":"signalr.connection.mock.js","sourceRoot":"","sources":["../../../../src/services/testing/signalr.connection.mock.ts"],"names":[],"mappings":";;;;AAIA,OAAO,EAAE,sBAAsB,EAAE,6CAA6C;;;;;;;;;;AAS9E,IAAA;IACI,+BACY,cACA,cACA;QAFA,iBAAY,GAAZ,YAAY;QACZ,iBAAY,GAAZ,YAAY;QACZ,eAAU,GAAV,UAAU;KACrB;IAED,sBAAI,yCAAM;;;;QAAV;YACI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;SAC5B;;;OAAA;IAED,sBAAI,yCAAM;;;;QAAV;YACI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;SAC3C;;;OAAA;IAED,sBAAI,qCAAE;;;;QAAN;YACI,MAAM,CAAC,8BAA8B,CAAC;SACzC;;;OAAA;;;;IAEM,oCAAI;;;;;;;;IAGL,qCAAK;;;;QACP,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;;;;;;IAG1B,sCAAM;;;;;cAAC,MAAc;QAAE,oBAAoB;aAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;YAApB,mCAAoB;;QAC9C,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;;;;;;IAG1B,sCAAM;;;;;cAAI,QAAmC;QAChD,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;;;;;;;IAGxC,yCAAS;;;;;cAAI,KAAa;QAC7B,qBAAI,QAAQ,GAAG,IAAI,sBAAsB,CAAI,KAAK,CAAC,CAAC;QACpD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACtB,MAAM,CAAC,QAAQ,CAAC;;gCAlDxB;IAoDC,CAAA;AAvCD,iCAuCC","sourcesContent":["import { Observable } from 'rxjs/Observable';\nimport { AsyncSubject } from 'rxjs/AsyncSubject';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport { SignalRConfiguration } from '../signalr.configuration';\nimport { BroadcastEventListener } from '../eventing/broadcast.event.listener';\nimport { Subject } from 'rxjs/Subject';\nimport { ConnectionStatus } from '../connection/connection.status';\nimport { ISignalRConnection } from '../connection/i.signalr.connection';\n\nexport interface IListenerCollection {\n    [name: string]: BroadcastEventListener<any>;\n}\n\nexport class SignalRConnectionMock implements ISignalRConnection {\n    constructor(\n        private _mockErrors$: Subject<any>,\n        private _mockStatus$: Subject<ConnectionStatus>,\n        private _listeners: IListenerCollection) {\n    }\n\n    get errors(): Observable<any> {\n        return this._mockErrors$;\n    }\n\n    get status(): Observable<ConnectionStatus> {\n        return this._mockStatus$.asObservable();\n    }\n\n    get id(): string {\n        return 'xxxxxxxx-xxxx-xxxx-xxxxxxxxx';\n    }\n\n    public stop(): void {\n    }\n\n   public start(): Promise<any> {\n        return Promise.resolve(null); // TODO: implement\n    }\n\n    public invoke(method: string, ...parameters: any[]): Promise<any> {\n        return Promise.resolve(null);\n    }\n\n    public listen<T>(listener: BroadcastEventListener<T>): void {\n        this._listeners[listener.event] = listener;\n    }\n\n    public listenFor<T>(event: string): BroadcastEventListener<T> {\n        let listener = new BroadcastEventListener<T>(event);\n        this.listen(listener);\n        return listener;\n    }\n}\n\n\n"]}