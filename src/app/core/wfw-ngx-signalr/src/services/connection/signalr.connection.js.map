{"version":3,"file":"signalr.connection.js","sourceRoot":"","sources":["../../../../src/services/connection/signalr.connection.ts"],"names":[],"mappings":"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","sourcesContent":["import { ISignalRConnection } from './i.signalr.connection';\nimport { Observable } from 'rxjs/Observable';\nimport { BroadcastEventListener } from '../eventing/broadcast.event.listener';\nimport { ConnectionStatus } from './connection.status';\nimport { NgZone } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { SignalRConfiguration } from '../signalr.configuration';\nimport { ConnectionTransport } from './connection.transport';\n\nexport class SignalRConnection implements ISignalRConnection {\n    private _status: Observable<ConnectionStatus>;\n    private _errors: Observable<any>;\n    private _jConnection: any;\n    private _jProxy: any;\n    private _zone: NgZone;\n    private _configuration: SignalRConfiguration;\n\n    constructor(jConnection: any, jProxy: any, zone: NgZone, configuration: SignalRConfiguration) {\n        this._jProxy = jProxy;\n        this._jConnection = jConnection;\n        this._zone = zone;\n        this._errors = this.wireUpErrorsAsObservable();\n        this._status = this.wireUpStatusEventsAsObservable();\n        this._configuration = configuration;\n    }\n\n    public get errors(): Observable<any> {\n        return this._errors;\n    }\n\n    public get status(): Observable<ConnectionStatus> {\n        return this._status;\n    }\n\n    public start(): Promise<ISignalRConnection> {\n\n        let jTransports = this.convertTransports(this._configuration.transport);\n\n        let $promise = new Promise<ISignalRConnection>((resolve, reject) => {\n                this._jConnection\n                .start({\n                        jsonp: this._configuration.jsonp,\n                        transport: jTransports,\n                        withCredentials: this._configuration.withCredentials,\n                    })\n                .done(() => {\n                        console.log('Connection established, ID: ' + this._jConnection.id);\n                        console.log('Connection established, Transport: ' + this._jConnection.transport.name);\n                        resolve(this);\n                    })\n                .fail((error: any) => {\n                        console.log('Could not connect');\n                        reject('Failed to connect. Error: ' + error.message); // ex: Error during negotiation request.\n                    });\n            });\n        return $promise;\n    }\n\n    public stop(): void {\n        this._jConnection.stop();\n    }\n\n    public get id(): string {\n        return this._jConnection.id;\n    }\n\n    public invoke(method: string, ...parameters: any[]): Promise<any> {\n        if (method == null) {\n            throw new Error('SignalRConnection: Failed to invoke. Argument \\'method\\' can not be null');\n        }\n        this.log(`SignalRConnection. Start invoking \\'${method}\\'...`);\n\n        let $promise = new Promise<any>((resolve, reject) => {\n            this._jProxy.invoke(method, ...parameters)\n                .done((result: any) => {\n                    this.log(`\\'${method}\\' invoked succesfully. Resolving promise...`);\n                    resolve(result);\n                    this.log(`Promise resolved.`);\n                })\n                .fail((err: any) => {\n                    console.log(`Invoking \\'${method}\\' failed. Rejecting promise...`);\n                    reject(err);\n                    console.log(`Promise rejected.`);\n                });\n        });\n        return $promise;\n    }\n\n    public listen<T>(listener: BroadcastEventListener<T>): void {\n        if (listener == null) {\n            throw new Error('Failed to listen. Argument \\'listener\\' can not be null');\n        }\n\n        this.log(`SignalRConnection: Starting to listen to server event with name ${listener.event}`);\n        this._jProxy.on(listener.event, (...args: any[]) => {\n\n            this._zone.run(() => {\n                let casted: T = null;\n                if (args.length > 0) {\n                    casted = <T>args[0];\n                };\n                this.log('SignalRConnection.proxy.on invoked. Calling listener next() ...');\n                listener.next(casted);\n                this.log('listener next() called.');\n            });\n        });\n    }\n\n    public listenFor<T>(event: string): BroadcastEventListener<T> {\n        if (event == null || event === '') {\n            throw new Error('Failed to listen. Argument \\'event\\' can not be empty');\n        }\n\n        let listener = new BroadcastEventListener<T>(event);\n\n        this.listen(listener);\n\n        return listener;\n    }\n\n    private convertTransports(transports: ConnectionTransport | ConnectionTransport[]): any {\n        if (transports instanceof Array) {\n            return transports.map((t: ConnectionTransport) => t.name);\n        }\n        return transports.name;\n    }\n\n\n    private wireUpErrorsAsObservable(): Observable<any> {\n        let sError = new Subject<any>();\n\n        this._jConnection.error((error: any) => {\n            //this._zone.run(() => {  /*errors don't need to run in a  zone*/\n            sError.next(error);\n            //});\n        });\n        return sError;\n    }\n\n    private wireUpStatusEventsAsObservable(): Observable<ConnectionStatus> {\n        let sStatus = new Subject<ConnectionStatus>();\n        // aggregate all signalr connection status handlers into 1 observable.\n        // handler wire up, for signalr connection status callback.\n        this._jConnection.stateChanged((change: any) => {\n            this._zone.run(() => {\n                sStatus.next(new ConnectionStatus(change.newState));\n            });\n        });\n        return sStatus.asObservable();\n    }\n\n    private onBroadcastEventReceived<T>(listener: BroadcastEventListener<T>, ...args: any[]) {\n        this.log('SignalRConnection.proxy.on invoked. Calling listener next() ...');\n\n        let casted: T = null;\n        if (args.length > 0) {\n            casted = <T>args[0];\n        }\n\n        this._zone.run(() => {\n            listener.next(casted);\n        });\n\n        this.log('listener next() called.');\n    }\n\n    private log(...args: any[]) {\n        if (this._jConnection.logging === false) {\n            return;\n        }\n        console.log(args.join(', '));\n    }\n}\n"]}